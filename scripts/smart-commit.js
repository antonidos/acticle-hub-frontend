#!/usr/bin/env node

import inquirer from 'inquirer';
import { execSync } from 'child_process';
import { exit } from 'process';

const COMMIT_TYPES = [
  {
    name: '‚ú® feat: –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å',
    value: '‚ú® feat',
    description: '–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å'
  },
  {
    name: 'üêõ fix: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–∞',
    value: 'üêõ fix',
    description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏'
  },
  {
    name: 'üìù docs: –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
    value: 'üìù docs',
    description: '–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏'
  },
  {
    name: 'üíÑ style: –°—Ç–∏–ª–∏/—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
    value: 'üíÑ style',
    description: '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞'
  },
  {
    name: '‚ôªÔ∏è refactor: –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥',
    value: '‚ôªÔ∏è refactor',
    description: '–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏'
  },
  {
    name: '‚úÖ test: –¢–µ—Å—Ç—ã',
    value: '‚úÖ test',
    description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤'
  },
  {
    name: 'üîß chore: –†—É—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏',
    value: 'üîß chore',
    description: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±–æ—Ä–∫–∏ –∏ —Ç.–¥.'
  },
  {
    name: '‚ö° perf: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
    value: '‚ö° perf',
    description: '–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
  },
  {
    name: 'üî• remove: –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–¥–∞/—Ñ–∞–π–ª–æ–≤',
    value: 'üî• remove',
    description: '–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–ª–∏ —Ñ–∞–π–ª–æ–≤'
  }
];

function getGitStatus() {
  try {
    const status = execSync('git status --porcelain', { encoding: 'utf8' });
    const staged = status.split('\n').filter(line => line.match(/^[MARC]/));
    const unstaged = status.split('\n').filter(line => line.match(/^.[MARC]/));
    const untracked = status.split('\n').filter(line => line.match(/^\?\?/));
    
    return {
      staged: staged.length,
      unstaged: unstaged.length,
      untracked: untracked.length,
      total: staged.length + unstaged.length + untracked.length
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –Ω–µ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–ª–∏ –Ω–µ—Ç git');
    exit(1);
  }
}

function checkForChanges() {
  const status = getGitStatus();
  
  if (status.total === 0) {
    console.log('‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞');
    exit(0);
  }
  
  console.log('üìä –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤:');
  if (status.staged > 0) console.log(`   üìã –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${status.staged}`);
  if (status.unstaged > 0) console.log(`   üìù –ù–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${status.unstaged}`);
  if (status.untracked > 0) console.log(`   ‚ùì –ù–µ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö: ${status.untracked}`);
  console.log('');
  
  return status;
}

async function addFiles(status) {
  if (status.staged === 0 && (status.unstaged > 0 || status.untracked > 0)) {
    const { shouldAdd } = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'shouldAdd',
        message: '–ù–µ—Ç –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤. –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è?',
        default: true
      }
    ]);
    
    if (shouldAdd) {
      console.log('üì¶ –î–æ–±–∞–≤–ª—è—é –≤—Å–µ —Ñ–∞–π–ª—ã...');
      execSync('git add .');
      console.log('‚úÖ –§–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    } else {
      console.log('‚ùå –û—Ç–º–µ–Ω–∞ –∫–æ–º–º–∏—Ç–∞');
      exit(0);
    }
  }
}

async function main() {
  console.log('üöÄ –£–º–Ω—ã–π –∫–æ–º–º–∏—Ç\n');
  
  const status = checkForChanges();
  
  await addFiles(status);
  
  const { type } = await inquirer.prompt([
    {
      type: 'list',
      name: 'type',
      message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è:',
      choices: COMMIT_TYPES,
      pageSize: 10
    }
  ]);
  
  const { message } = await inquirer.prompt([
    {
      type: 'input',
      name: 'message',
      message: '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞:',
      validate: (input) => {
        if (input.trim().length === 0) {
          return '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º';
        }
        if (input.length > 72) {
          return '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 72 —Å–∏–º–≤–æ–ª–∞)';
        }
        return true;
      }
    }
  ]);
  
  const { description } = await inquirer.prompt([
    {
      type: 'input',
      name: 'description',
      message: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):',
    }
  ]);
  
  let fullMessage = `${type}: ${message}`;
  if (description.trim()) {
    fullMessage += `\n\n${description}`;
  }
  
  console.log('\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞:');
  console.log(`"${fullMessage}"`);
  
  const { confirm } = await inquirer.prompt([
    {
      type: 'confirm',
      name: 'confirm',
      message: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–º–º–∏—Ç?',
      default: true
    }
  ]);
  
  if (confirm) {
    try {
      console.log('üîÑ –°–æ–∑–¥–∞—é –∫–æ–º–º–∏—Ç...');
      execSync(`git commit -m "${fullMessage}"`, { stdio: 'inherit' });
      console.log('‚úÖ –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–º–∏—Ç–∞:', error.message);
      exit(1);
    }
  } else {
    console.log('‚ùå –ö–æ–º–º–∏—Ç –æ—Ç–º–µ–Ω–µ–Ω');
    exit(0);
  }
}

process.on('SIGINT', () => {
  console.log('\n‚ùå –ö–æ–º–º–∏—Ç –æ—Ç–º–µ–Ω–µ–Ω');
  exit(0);
});

main().catch(error => {
  console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
  exit(1);
}); 